!html
head {
    %title chilon
    link(rel=stylesheet, type=text/css, href="css/global.css")
}

!body

!!#content
%h1 pito system call interceptor system
#links {
    links:
    %a(href=http://gitorious.org/pito/pito/trees/master) source
}

%p {
    Pito is a set of c++ libraries to make writing system call interceptors based on LD_PRELOAD wrappers easy.
}

%h2 Example 1: Using the pito log plugin

%code(source=sh) <<EOF
    james@turbstick chilon % pito log ls hello 
    2112 - calling opendir(hello) - 0x24a1d30
    2112 - calling readdir(0x24a1d30) - 0x24a1d58
    2112 - calling readdir(0x24a1d30) - 0x24a1d70
    2112 - calling readdir(0x24a1d30) - 0x24a1d88
    2112 - calling readdir(0x24a1d30) - 0x24a1da0
    2112 - calling readdir(0x24a1d30) - 0
    baby  kitten
EOF

%h2 The log plugin:

%h3 System call interceptor source file &ldquo;plugin/log/helper.hpp&rdquo;:

%code(source=cpp) <<EOF
#ifndef PITO_LOG_HELPER_HPP
#define PITO_LOG_HELPER_HPP

#include <pito/system_call.hpp>
#include <pito/lib/traits.hpp>

#include <chilon/print.hpp>

#include <iostream>

namespace pito { namespace log {

// Global constructor for this class will initialise the PID when the
// library is opened.
#ifdef PITO_LOG_PID
struct init {
    init() {
       pid_ = getpid();
    }
    pid_t   pid_;
};

init context;
#endif

template <class Tag>
struct system_call;

// All system calls will be directed through this class. Template
// specialisation on the system call tag can be used to treat certain
// system calls differently.
template <class Tag>
struct system_call : detail::system_call<Tag> {
    typedef detail::system_call<Tag> base_t;

    // to handle variadic c argument lists
    template <class... Args>
    PITO_RETURN(Tag) operator()(Args... args) {
#ifdef PITO_LOG_PID
        chilon::print(std::cerr, context.pid_, " - ");
#endif
        chilon::print(std::cerr, "calling ", base_t::name, "(");
        chilon::print_join(std::cerr, ", ", args...);
        std::cerr << ") - " << std::flush;
        auto ret = PITO_SUPER(Tag, args...);
        chilon::println(std::cerr, ret);
        return ret;
    }
};

} }

#endif
EOF

%h3 "plugin/log/source.cpp - redirect system calls to helper.cpp objects:"

%code(source=cpp) <<EOF
    // This macro is used by the pito includes.
    #define PITO_SYSTEM_CALL_BASE  log::system_call
    #define PITO_LOG_PID
    #include <pito/plugin/log/helper.hpp>

    // Including jail ensures processes can't break out of the environment
    // by using setenv and execv/command functions
    #include <pito/jail/c.hpp>

    // This file hooks all c library forwards together based on the
    //
    #include <pito/lib/c.hpp>
EOF

