!html
head {
    %title pito
    link(rel=stylesheet, type=text/css, href="css/global.css")
}

!body

!!#content
%h1 pito system call interceptor system
#links {
    links:
    %a(href=http://gitorious.org/pito/pito/trees/master) source
}

%p {
    Pito is a set of c++ libraries to make writing system call interceptors based on LD_PRELOAD wrappers easy.
}

%h2 Example 1: Using the pito log plugin

%code(source=sh) <<EOF
    james@turbstick chilon % pito log ls hello 
    2112 - calling opendir(hello) - 0x24a1d30
    2112 - calling readdir(0x24a1d30) - 0x24a1d58
    2112 - calling readdir(0x24a1d30) - 0x24a1d70
    2112 - calling readdir(0x24a1d30) - 0x24a1d88
    2112 - calling readdir(0x24a1d30) - 0x24a1da0
    2112 - calling readdir(0x24a1d30) - 0
    baby  kitten

    pito 0.9.1
    usage: pito [arguments] <wrapper library name> [wrapper arguments] <program> [program arguments]
     -v [ --verbose ]       increase verbosity
     -h [ --help ]          display help
     -s [ --silent ]        remain silent
     -l [ --library-dir ]   pito library directory

    james@turbstick pito % pito sandbox -h
    pito sandbox arguments
     -b [ --blacklist ]   disallow writes to this directory
     -w [ --whitelist ]   allow writes to this directory
     -p [ --pretend ]     pretend to allow writes to this directory
     -v [ --verbose ]     increase verbosity
     -h [ --help ]        display help
EOF

%h2 The log plugin:

%h3 "plugin/log/helper.hpp - print system calls names, arguments and return values."

%code(file=../../src/pito/plugin/log/helper.hpp)

%h3 "plugin/log/libc.cpp - redirect system calls to helper.cpp objects:"

%code(file=../../src/pito/plugin/log/libc.cpp)

