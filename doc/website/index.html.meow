!html
head {
    %title pito
    link(rel=stylesheet, type=text/css, href="css/global.css")
}

!body

!!#content
%h1 pito system call interceptor system
#links {
    links:
    %a(href=http://gitorious.org/pito/pito/trees/master) source
    %a(href=https://sourceforge.net/projects/pito/files/) download
}

%p {
    Pito is a set of c++0x header libraries for writing system call interceptor shared libraries based on LD_PRELOAD wrappers. Pito also provides the program &ldquo;pito&rdquo; for loading unix commands with such wrappers. &ldquo;pito&rdquo; is capable of passing command line arguments to loaded libraries.
}

%h2 1: Using pito and loading plugins

%code(source=sh) <<EOF
    % pito log ls hello
    2112: calling opendir(hello) - 0x24a1d30
    2112: calling readdir(0x24a1d30) - 0x24a1d58
    2112: calling readdir(0x24a1d30) - 0x24a1d70
    2112: calling readdir(0x24a1d30) - 0x24a1d88
    2112: calling readdir(0x24a1d30) - 0x24a1da0
    2112: calling readdir(0x24a1d30) - 0
    baby  kitten

    % pito -h
    pito 0.9.9
    usage: pito [arguments] <wrapper library name> [wrapper arguments] <program> [program arguments]
     -v [ --verbose ]       increase verbosity
     -h [ --help ]          display help
     -s [ --silent ]        remain silent
     -l [ --library-dir ]   pito library directory

    % pito sandbox -h
    pito sandbox arguments
     -b [ --blacklist ]   disallow writes to this directory
     -w [ --whitelist ]   allow writes to this directory
     -p [ --pretend ]     pretend to allow writes to this directory
     -v [ --verbose ]     increase verbosity
     -h [ --help ]        display help

    % pito sandbox -b/ touch cock
    open: /tmp/cock denied
    utimensat: /tmp/cock denied
    touch: cannot touch 'cock': Permission denied

    % pito sandbox -w blah -v touch cock
    default: P
    white list: /tmp/blah
    open: /tmp/cock pretend
EOF

%h2 The log plugin

%h3 "plugin/log/helper.hpp - print system calls names, arguments and return values."

%code(file=../../src/pito/plugin/log/helper.hpp)

%h3 "plugin/log/libc.cpp - redirect system calls to helper.cpp objects"

%code(file=../../src/pito/plugin/log/libc.cpp)

%h2 Writing plugins

%p Until this website is updated to include documentation for writing plugins the best way to start is to copy one of the existing plugins from git out of src/pito/plugins. This plugin can be added to the build process of pito by adding its directory name as for the existing plugins in src/pito/plugins/CMakeLists.txt. The log plugin is the simplest to copy and the sandbox plugin shows how plugins may receive and use command line arguments.

%h2 Protected environment variables

%p Any environment variables beginning with &ldquo;PITO_&rdquo (in addition to the LD_PRELOAD environment variable) will be protected by the underlying library code and passed on in the environment unmodified to all instances of a library. These variables can be used in a plugin's init function to pass options set by command line arguments.

%h2 Supported operating systems

pito is primarily developed and tested on Linux. It has also been developed and tested on OS X. It may also work on other unix environments, any help testing and/or porting pito to other operating systems would be greatly appreciated.

%h2 Supported development environments.

pito uses C++0x features already available in certain compilers. It is primarily developed using gcc 4.5 and has also been tested using gcc 4.4.

